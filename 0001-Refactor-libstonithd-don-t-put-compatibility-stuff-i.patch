From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Ken Gaillot <kgaillot@redhat.com>
Date: Mon, 19 Jul 2021 17:36:01 -0500
Subject: [PATCH] Refactor: libstonithd: don't put compatibility stuff in
 separate header

This is inconsistent with how we do compatibility code in other headers, but
DLM source code can include stonith-ng.h directly without access to any other
headers, so for compatibility with *that*, do it differently ...
---
 include/crm/fencing/Makefile.am |  1 -
 include/crm/fencing/compat.h    | 33 ---------------------------------
 include/crm/stonith-ng.h        | 15 ++++++++++++++-
 lib/fencing/st_client.c         |  2 +-
 4 files changed, 15 insertions(+), 36 deletions(-)
 delete mode 100644 include/crm/fencing/compat.h

diff --git a/include/crm/fencing/Makefile.am b/include/crm/fencing/Makefile.am
index 8bfc8d8..12b434d 100644
--- a/include/crm/fencing/Makefile.am
+++ b/include/crm/fencing/Makefile.am
@@ -10,5 +10,4 @@ MAINTAINERCLEANFILES	= Makefile.in
 
 headerdir=$(pkgincludedir)/crm/fencing
 
-header_HEADERS		= compat.h
 noinst_HEADERS		= internal.h
diff --git a/include/crm/fencing/compat.h b/include/crm/fencing/compat.h
deleted file mode 100644
index 6a3c15b..0000000
--- a/include/crm/fencing/compat.h
+++ /dev/null
@@ -1,33 +0,0 @@
-/*
- * Copyright 2004-2021 the Pacemaker project contributors
- *
- * The version control history for this file may have further details.
- *
- * This source code is licensed under the GNU Lesser General Public License
- * version 2.1 or later (LGPLv2.1+) WITHOUT ANY WARRANTY.
- */
-
-#ifndef PCMK__FENCING_COMPAT__H
-#  define PCMK__FENCING_COMPAT__H
-
-#ifdef __cplusplus
-extern "C" {
-#endif
-
-/**
- * \file
- * \brief Deprecated Pacemaker fencing API
- * \ingroup fencing
- * \deprecated Do not include this header directly. The fencing APIs in this
- *             header, and the header itself, will be removed in a future
- *             release.
- */
-
-//! \deprecated Use stonith_get_namespace() instead
-const char *get_stonith_provider(const char *agent, const char *provider);
-
-#ifdef __cplusplus
-}
-#endif
-
-#endif // PCMK__FENCING_COMPAT__H
diff --git a/include/crm/stonith-ng.h b/include/crm/stonith-ng.h
index 2e47f19..6994a0c 100644
--- a/include/crm/stonith-ng.h
+++ b/include/crm/stonith-ng.h
@@ -20,6 +20,12 @@ extern "C" {
  * \ingroup fencing
  */
 
+/* IMPORTANT: DLM source code includes this file directly, without having access
+ * to other Pacemaker headers on its include path, so this file should *not*
+ * include any other Pacemaker headers. (DLM might be updated to avoid the
+ * issue, but we should still follow this guideline for a long time after.)
+ */
+
 #  include <dlfcn.h>
 #  include <errno.h>
 #  include <stdbool.h>  // bool
@@ -559,7 +565,14 @@ bool stonith_agent_exists(const char *agent, int timeout);
 const char *stonith_action_str(const char *action);
 
 #if !defined(PCMK_ALLOW_DEPRECATED) || (PCMK_ALLOW_DEPRECATED == 1)
-#include <crm/fencing/compat.h>
+/* Normally we'd put this section in a separate file (crm/fencing/compat.h), but
+ * we can't do that for the reason noted at the top of this file. That does mean
+ * we have to duplicate these declarations where they're implemented.
+ */
+
+//! \deprecated Use stonith_get_namespace() instead
+const char *get_stonith_provider(const char *agent, const char *provider);
+
 #endif
 
 #ifdef __cplusplus
diff --git a/lib/fencing/st_client.c b/lib/fencing/st_client.c
index b6ea120..e285f51 100644
--- a/lib/fencing/st_client.c
+++ b/lib/fencing/st_client.c
@@ -2697,7 +2697,7 @@ stonith__device_parameter_flags(uint32_t *device_flags, const char *device_name,
 
 // Deprecated functions kept only for backward API compatibility
 
-#include <crm/fencing/compat.h>
+const char *get_stonith_provider(const char *agent, const char *provider);
 
 const char *
 get_stonith_provider(const char *agent, const char *provider)
